type AuthTokens {
  id: ID!
  createdAt: DateTime!
  lastModified: DateTime!
  accessToken: String!
  refreshToken: String!
}

type Book {
  id: ID!
  createdAt: DateTime!
  lastModified: DateTime!
  title: String!
  slug: String
  description: String
  isbn: String
  novelId: ID!
  novel: Novel!
  chapters(
    where: ChapterWhere

    """Returns the elements that come before the specified cursor"""
    before: String

    """Returns the elements that come after the specified cursor"""
    after: String

    """Returns up to the first n elements from the list"""
    first: Float

    """Returns up to the last n elements from the list"""
    last: Float

    """Reverse the order of the list"""
    reverse: Boolean

    """Sort list by the given key"""
    sortKey: String
  ): ChapterConnection!
}

type BookConnection {
  pageInfo: PageInfo!
  edges: [BookEdge!]!
}

type BookEdge {
  node: Book!
  cursor: String!
}

input BookInput {
  title: String!
  slug: String
  description: String
  isbn: String
  novelId: ID!
}

input BookQueryableInput {
  title: StringWhere
  description: StringWhere
  isbn: StringWhere
}

input BookWhere {
  AND: [BookQueryableInput!]
  OR: [BookQueryableInput!]
}

type Chapter {
  id: ID!
  createdAt: DateTime!
  lastModified: DateTime!
  title: String!
  slug: String
  content: String
  novelId: ID!
  bookId: ID
  novel: Novel!
  book: Book!
  comments(
    where: ChapterWhere

    """Returns the elements that come before the specified cursor"""
    before: String

    """Returns the elements that come after the specified cursor"""
    after: String

    """Returns up to the first n elements from the list"""
    first: Float

    """Returns up to the last n elements from the list"""
    last: Float

    """Reverse the order of the list"""
    reverse: Boolean

    """Sort list by the given key"""
    sortKey: String
  ): ChapterConnection!
}

type ChapterConnection {
  pageInfo: PageInfo!
  edges: [ChapterEdge!]!
}

type ChapterEdge {
  node: Chapter!
  cursor: String!
}

input ChapterInput {
  title: String!
  slug: String
  content: String
  novelId: ID!
  bookId: ID
}

input ChapterQueryableInput {
  title: StringWhere
}

input ChapterWhere {
  AND: [ChapterQueryableInput!]
  OR: [ChapterQueryableInput!]
}

type Comment {
  id: ID!
  createdAt: DateTime!
  lastModified: DateTime!
  content: String!
  chapterId: ID!
  novel: Chapter!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge!]!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

input CommentInput {
  content: String!
  chapterId: ID!
}

input CommentQueryableInput {
  content: StringWhere
}

input CommentWhere {
  AND: [CommentQueryableInput!]
  OR: [CommentQueryableInput!]
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Mutation {
  reviewUpdate(data: ReviewInput!, id: ID!): Review
  reviewDelete(id: ID!): Review
  reviewCreate(data: ReviewInput!): Review
  novelUpdate(data: NovelInput!, id: ID!): Novel
  novelDelete(id: ID!): Novel
  novelCreate(data: NovelInput!): Novel
  commentUpdate(data: CommentInput!, id: ID!): Comment
  commentDelete(id: ID!): Comment
  commentCreate(data: CommentInput!): Comment
  chapterUpdate(data: ChapterInput!, id: ID!): Chapter
  chapterDelete(id: ID!): Chapter
  chapterCreate(data: ChapterInput!): Chapter
  bookUpdate(data: BookInput!, id: ID!): Book
  bookDelete(id: ID!): Book
  bookCreate(data: BookInput!): Book
  tokenCreate(data: TokenCreateInput!): AuthTokens
  tokenRefresh(data: TokenRefreshInput!): AuthTokens
  createUser(data: CreateUserInput!): User
}

type Novel {
  id: ID!
  createdAt: DateTime!
  lastModified: DateTime!
  title: String
  slug: String
  description: String

  """
  Types: [Web Novel, Light Novel, Chinese Novel, Filipino Novel, Korean Novel,
  Thai Novel, Malaysian Novel, Indonesia Novel, Vietnamese Novel]
  """
  type: String
  tags: String
  genres: String
  origins: String
  authors: String
  artists: String
  relatedNovels: String
  recommendedNovels: String
  alternativeNames: String
  mediaGallery: String
  coverImage: String

  """Likes: (not related to novel ratings)"""
  likes: Float

  """Total Views: (controlled increment)"""
  views: Float
  year: Float

  """Types: [Completed, Ongoing, Hiatus]"""
  status: String
  chapters(
    where: ChapterWhere

    """Returns the elements that come before the specified cursor"""
    before: String

    """Returns the elements that come after the specified cursor"""
    after: String

    """Returns up to the first n elements from the list"""
    first: Float

    """Returns up to the last n elements from the list"""
    last: Float

    """Reverse the order of the list"""
    reverse: Boolean

    """Sort list by the given key"""
    sortKey: String
  ): ChapterConnection!
  books(
    where: BookWhere

    """Returns the elements that come before the specified cursor"""
    before: String

    """Returns the elements that come after the specified cursor"""
    after: String

    """Returns up to the first n elements from the list"""
    first: Float

    """Returns up to the last n elements from the list"""
    last: Float

    """Reverse the order of the list"""
    reverse: Boolean

    """Sort list by the given key"""
    sortKey: String
  ): BookConnection!
  reviews(
    where: ReviewWhere

    """Returns the elements that come before the specified cursor"""
    before: String

    """Returns the elements that come after the specified cursor"""
    after: String

    """Returns up to the first n elements from the list"""
    first: Float

    """Returns up to the last n elements from the list"""
    last: Float

    """Reverse the order of the list"""
    reverse: Boolean

    """Sort list by the given key"""
    sortKey: String
  ): ReviewConnection!
}

type NovelConnection {
  pageInfo: PageInfo!
  edges: [NovelEdge!]!
}

type NovelEdge {
  node: Novel!
  cursor: String!
}

input NovelInput {
  title: String
  slug: String
  description: String

  """
  Types: [Web Novel, Light Novel, Chinese Novel, Filipino Novel, Korean Novel,
  Thai Novel, Malaysian Novel, Indonesia Novel, Vietnamese Novel]
  """
  type: String
  tags: String
  genres: String
  origins: String
  authors: String
  artists: String
  relatedNovels: String
  recommendedNovels: String
  alternativeNames: String
  mediaGallery: String
  coverImage: String

  """Likes: (not related to novel ratings)"""
  likes: Float

  """Total Views: (controlled increment)"""
  views: Float
  year: Float

  """Types: [Completed, Ongoing, Hiatus]"""
  status: String
}

input NovelQueryableInput {
  title: StringWhere
  slug: StringWhere
  description: StringWhere
  type: StringWhere
  tags: StringWhere
  genres: StringWhere
  origins: StringWhere
  authors: StringWhere
  artists: StringWhere
  relatedNovels: StringWhere
  associatedNames: StringWhere
  alternativeNames: StringWhere
  status: StringWhere
  year: NumberWhere
  likes: NumberWhere
  views: NumberWhere
}

input NovelWhere {
  AND: [NovelQueryableInput!]
  OR: [NovelQueryableInput!]
}

input NumberWhere {
  is: Float
  not: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
  count: Float!
}

type Query {
  reviews(
    where: ReviewWhere

    """Returns the elements that come before the specified cursor"""
    before: String

    """Returns the elements that come after the specified cursor"""
    after: String

    """Returns up to the first n elements from the list"""
    first: Float

    """Returns up to the last n elements from the list"""
    last: Float

    """Reverse the order of the list"""
    reverse: Boolean

    """Sort list by the given key"""
    sortKey: String
  ): ReviewConnection
  review(id: ID!): Review
  novels(
    where: NovelWhere

    """Returns the elements that come before the specified cursor"""
    before: String

    """Returns the elements that come after the specified cursor"""
    after: String

    """Returns up to the first n elements from the list"""
    first: Float

    """Returns up to the last n elements from the list"""
    last: Float

    """Reverse the order of the list"""
    reverse: Boolean

    """Sort list by the given key"""
    sortKey: String
  ): NovelConnection
  novel(id: ID!): Novel
  comments(
    where: CommentWhere

    """Returns the elements that come before the specified cursor"""
    before: String

    """Returns the elements that come after the specified cursor"""
    after: String

    """Returns up to the first n elements from the list"""
    first: Float

    """Returns up to the last n elements from the list"""
    last: Float

    """Reverse the order of the list"""
    reverse: Boolean

    """Sort list by the given key"""
    sortKey: String
  ): CommentConnection
  comment(id: ID!): Comment
  chapters(
    where: ChapterWhere

    """Returns the elements that come before the specified cursor"""
    before: String

    """Returns the elements that come after the specified cursor"""
    after: String

    """Returns up to the first n elements from the list"""
    first: Float

    """Returns up to the last n elements from the list"""
    last: Float

    """Reverse the order of the list"""
    reverse: Boolean

    """Sort list by the given key"""
    sortKey: String
  ): ChapterConnection
  chapter(id: ID!): Chapter
  books(
    where: BookWhere

    """Returns the elements that come before the specified cursor"""
    before: String

    """Returns the elements that come after the specified cursor"""
    after: String

    """Returns up to the first n elements from the list"""
    first: Float

    """Returns up to the last n elements from the list"""
    last: Float

    """Reverse the order of the list"""
    reverse: Boolean

    """Sort list by the given key"""
    sortKey: String
  ): BookConnection
  book(id: ID!): Book
  profile: User
}

type Review {
  id: ID!
  createdAt: DateTime!
  lastModified: DateTime!
  content: String

  """Rating: [0 - 1]"""
  rating: Float!
  novelId: ID!
  novel: Novel!
}

type ReviewConnection {
  pageInfo: PageInfo!
  edges: [ReviewEdge!]!
}

type ReviewEdge {
  node: Review!
  cursor: String!
}

input ReviewInput {
  content: String

  """Rating: [0 - 1]"""
  rating: Float!
  novelId: ID!
}

input ReviewQueryableInput {
  content: StringWhere
  rating: NumberWhere
}

input ReviewWhere {
  AND: [ReviewQueryableInput!]
  OR: [ReviewQueryableInput!]
}

input StringWhere {
  is: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  notContains: String
  startsWith: String
  notStartsWith: String
  endsWith: String
  notEndsWith: String
}

type TokenConnection {
  pageInfo: PageInfo!
  edges: [TokenEdge!]!
}

input TokenCreateInput {
  email: String!
  password: String!
}

type TokenEdge {
  node: AuthTokens!
  cursor: String!
}

input TokenRefreshInput {
  email: String!
  password: String!
  token: String!
}

type User {
  id: ID!
  createdAt: DateTime!
  lastModified: DateTime!
  username: String!
  email: String!
}

